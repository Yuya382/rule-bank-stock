---
description:
globs:
alwaysApply: false
---


# TypeScriptルール

## 基本原則

- 型安全性を最優先にする
- `any`型の使用を避ける
- 明示的な型注釈を適切に使用する
- strictモードを有効にする

## 型定義

### 基本型

```typescript
// プリミティブ型を明示的に定義
const userName: string = "John";
const age: number = 25;
const isActive: boolean = true;

// 配列型
const numbers: number[] = [1, 2, 3];
const users: User[] = [];

// オブジェクト型
interface User {
  id: number;
  name: string;
  email: string;
  isActive: boolean;
}
```

### Union型とIntersection型

```typescript
// Union型
type Status = "pending" | "approved" | "rejected";

// Intersection型
type UserWithRole = User & {
  role: "admin" | "user";
};
```

### ジェネリクス

```typescript
// ジェネリック関数
function identity<T>(arg: T): T {
  return arg;
}

// ジェネリックインターフェース
interface ApiResponse<T> {
  data: T;
  status: number;
  message: string;
}
```

## 関数定義

### 関数の型注釈

```typescript
// 関数の戻り値の型を明示
function calculateTotal(items: number[]): number {
  return items.reduce((sum, item) => sum + item, 0);
}

// アロー関数
const formatUserName = (user: User): string => {
  return `${user.name} (${user.email})`;
};

// 非同期関数
async function fetchUser(id: number): Promise<User> {
  const response = await fetch(`/api/users/${id}`);
  return response.json();
}
```

### 高階関数

```typescript
// コールバック関数の型定義
type FilterCallback<T> = (item: T, index: number) => boolean;

function customFilter<T>(items: T[], callback: FilterCallback<T>): T[] {
  return items.filter(callback);
}
```

## クラス定義

```typescript
class UserService {
  private readonly baseUrl: string;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
  }

  async getUser(id: number): Promise<User> {
    const response = await fetch(`${this.baseUrl}/users/${id}`);
    return response.json();
  }

  async updateUser(id: number, updates: Partial<User>): Promise<User> {
    const response = await fetch(`${this.baseUrl}/users/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updates),
    });
    return response.json();
  }
}
```

## 型ガード

```typescript
// 型ガード関数
function isUser(obj: unknown): obj is User {
  return (
    typeof obj === 'object' &&
    obj !== null &&
    'id' in obj &&
    'name' in obj &&
    'email' in obj
  );
}

// 使用例
if (isUser(data)) {
  // この時点でdataはUser型として扱われる
  console.log(data.name);
}
```

## ユーティリティ型

```typescript
// Partial - 全てのプロパティを任意にする
type UserUpdate = Partial<User>;

// Pick - 特定のプロパティのみを選択
type UserBasic = Pick<User, 'id' | 'name'>;

// Omit - 特定のプロパティを除外
type UserWithoutId = Omit<User, 'id'>;

// Record - キーと値の型を指定
type UserRoles = Record<string, 'admin' | 'user' | 'guest'>;
```

## エラーハンドリング

```typescript
// Result型パターン
type Result<T, E = Error> = {
  success: true;
  data: T;
} | {
  success: false;
  error: E;
};

async function safeApiCall<T>(
  apiCall: () => Promise<T>
): Promise<Result<T>> {
  try {
    const data = await apiCall();
    return { success: true, data };
  } catch (error) {
    return { 
      success: false, 
      error: error instanceof Error ? error : new Error(String(error))
    };
  }
}
```

## TSConfig設定

```json
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noEmit": true,
    "isolatedModules": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  }
}
```

## 禁止事項

- `any`型の使用
- `@ts-ignore`の使用（やむを得ない場合は理由をコメントで記載）
- 型アサーション（`as`）の濫用
- 暗黙的な型変換への依存