---
description:
globs:
alwaysApply: false
---


# Next.jsルール

## 基本原則

- App Router を使用する（Next.js 13+）
- Server Components を優先的に使用
- パフォーマンスを重視した実装
- SEO を考慮した構成

## プロジェクト構成

```
app/
├── (auth)/                    # Route Groups
│   ├── login/
│   │   └── page.tsx
│   └── register/
│       └── page.tsx
├── dashboard/
│   ├── page.tsx
│   ├── loading.tsx
│   ├── error.tsx
│   └── users/
│       ├── page.tsx
│       └── [id]/
│           └── page.tsx
├── api/
│   └── users/
│       └── route.ts
├── globals.css
├── layout.tsx
├── page.tsx
├── loading.tsx
├── error.tsx
└── not-found.tsx
```

## Server Components と Client Components

### Server Components（デフォルト）

```tsx
// app/users/page.tsx
import { getUsers } from '@/lib/users';

/**
 * ユーザー一覧ページ - Server Component
 */
export default async function UsersPage() {
  const users = await getUsers();

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">ユーザー一覧</h1>
      <div className="grid gap-4">
        {users.map(user => (
          <UserCard key={user.id} user={user} />
        ))}
      </div>
    </div>
  );
}

// メタデータの設定
export const metadata = {
  title: 'ユーザー一覧',
  description: 'システムに登録されているユーザーの一覧です',
};
```

### Client Components

```tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';

/**
 * ユーザー検索フォーム - Client Component
 */
export default function UserSearchForm() {
  const [query, setQuery] = useState('');
  const router = useRouter();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    router.push(`/users?q=${encodeURIComponent(query)}`);
  };

  return (
    <form onSubmit={handleSubmit} className="mb-6">
      <div className="flex gap-2">
        <input
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="ユーザーを検索..."
          className="flex-1 px-4 py-2 border border-gray-300 rounded-lg"
        />
        <button
          type="submit"
          className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          検索
        </button>
      </div>
    </form>
  );
}
```

## API Routes

```tsx
// app/api/users/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getUsers, createUser } from '@/lib/users';

/**
 * ユーザー一覧取得API
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const page = Number(searchParams.get('page')) || 1;
    const limit = Number(searchParams.get('limit')) || 10;

    const users = await getUsers({ page, limit });

    return NextResponse.json({
      users,
      pagination: {
        page,
        limit,
        total: users.length,
      },
    });
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to fetch users' },
      { status: 500 }
    );
  }
}

/**
 * ユーザー作成API
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const user = await createUser(body);

    return NextResponse.json(user, { status: 201 });
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to create user' },
      { status: 500 }
    );
  }
}
```

## 動的ルーティング

```tsx
// app/users/[id]/page.tsx
import { getUser } from '@/lib/users';
import { notFound } from 'next/navigation';

interface UserPageProps {
  params: { id: string };
}

/**
 * ユーザー詳細ページ
 */
export default async function UserPage({ params }: UserPageProps) {
  const user = await getUser(params.id);

  if (!user) {
    notFound();
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">{user.name}</h1>
      <div className="bg-white rounded-lg shadow-md p-6">
        <p className="text-gray-600 mb-2">メール: {user.email}</p>
        <p className="text-gray-600">作成日: {new Date(user.createdAt).toLocaleDateString()}</p>
      </div>
    </div>
  );
}

// 動的メタデータ
export async function generateMetadata({ params }: UserPageProps) {
  const user = await getUser(params.id);

  return {
    title: `${user?.name} - ユーザー詳細`,
    description: `${user?.name}のプロフィール情報`,
  };
}
```

## データフェッチング

### サーバーサイドフェッチング

```tsx
// lib/users.ts
import { cache } from 'react';

/**
 * ユーザー一覧取得（キャッシュ付き）
 */
export const getUsers = cache(async () => {
  const response = await fetch('https://api.example.com/users', {
    headers: {
      'Authorization': `Bearer ${process.env.API_TOKEN}`,
    },
    next: { revalidate: 60 }, // 60秒でキャッシュを更新
  });

  if (!response.ok) {
    throw new Error('Failed to fetch users');
  }

  return response.json();
});

/**
 * ユーザー詳細取得
 */
export const getUser = cache(async (id: string) => {
  const response = await fetch(`https://api.example.com/users/${id}`, {
    headers: {
      'Authorization': `Bearer ${process.env.API_TOKEN}`,
    },
    next: { revalidate: 300 }, // 5分でキャッシュを更新
  });

  if (!response.ok) {
    if (response.status === 404) {
      return null;
    }
    throw new Error('Failed to fetch user');
  }

  return response.json();
});
```

## レイアウト

```tsx
// app/layout.tsx
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: {
    template: '%s | My App',
    default: 'My App',
  },
  description: 'Generated by create next app',
};

/**
 * ルートレイアウト
 */
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="ja">
      <body className={inter.className}>
        <header className="bg-white shadow-sm border-b">
          <nav className="container mx-auto px-4 py-4">
            <h1 className="text-xl font-bold">My App</h1>
          </nav>
        </header>
        <main className="min-h-screen bg-gray-50">
          {children}
        </main>
        <footer className="bg-gray-800 text-white p-4">
          <p className="text-center">© 2024 My App</p>
        </footer>
      </body>
    </html>
  );
}
```

## エラーハンドリング

```tsx
// app/error.tsx
'use client';

import { useEffect } from 'react';

/**
 * エラーページ
 */
export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  useEffect(() => {
    console.error(error);
  }, [error]);

  return (
    <div className="container mx-auto px-4 py-8 text-center">
      <h2 className="text-2xl font-bold text-red-600 mb-4">
        エラーが発生しました
      </h2>
      <p className="text-gray-600 mb-6">
        申し訳ございません。予期せぬエラーが発生しました。
      </p>
      <button
        onClick={() => reset()}
        className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
      >
        再試行
      </button>
    </div>
  );
}
```

## 環境変数設定

```env
# .env.local
NEXT_PUBLIC_API_URL=https://api.example.com
API_TOKEN=your-api-token
DATABASE_URL=postgresql://user:password@localhost:5432/myapp
```

## next.config.js

```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
  images: {
    domains: ['example.com', 'images.unsplash.com'],
  },
  env: {
    CUSTOM_KEY: process.env.CUSTOM_KEY,
  },
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: '/api/:path*',
      },
    ];
  },
};

module.exports = nextConfig;
```

## ベストプラクティス

1. **Server Components優先**: 可能な限りServer Componentsを使用
2. **適切なキャッシュ**: fetch APIのnext.revalidateを活用
3. **メタデータ最適化**: SEOを考慮したメタデータ設定
4. **エラーハンドリング**: 適切なエラーページの実装
5. **パフォーマンス**: 画像最適化、コード分割の活用

## 禁止事項

- Pages Router との混在使用
- 不必要なClient Componentの使用
- キャッシュ戦略の無視
- 適切でないメタデータ設定
- セキュリティを考慮しない環境変数の使用